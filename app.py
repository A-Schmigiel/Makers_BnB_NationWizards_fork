import os
from flask import Flask, request, render_template, redirect
from lib.database_connection import get_flask_database_connection
import datetime
import calendar
# helps manage secret key
from flask_bcrypt import Bcrypt
from forms import MyForm, ListSpacesForm
# repositories
from lib.spaces_repository import SpaceRepository
from lib.requests_repository import RequestRepository
from lib.users_repository import UserRepository
# classes
from lib.space import Space
from lib.request import Request
from lib.user import User



# Create a new Flask app
app = Flask(__name__)


# #This is the start of the login and password security content
# #  Hardcoded secret key 
app.config['SECRET_KEY'] = '072bb84cfdff08af0c1d8cd67f3be65bba12485bf0e9ea4dae5a49dc83260663'

# bcrypt = Bcrypt(app)

# @app.route('/', methods=['GET', 'POST'])
# def index():
#     form = MyForm()
#     if form.validate_on_submit():
#         username = form.username.data
#         email = form.email.data
#         password = form.password.data

#         hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

#         if bcrypt.check_password_hash(hashed_password, password):
#             match_message = "Password hash matches input password."
#         else:
#             match_message = "Password hash did not match input."
#         return (
#             f'Hello, {username}!<br>'
#             f'Email: {email}<br>'
#             f'{match_message}'
#         )
    
#     return render_template('index.html', form=form)

# if __name__ == '__main__':
#     app.run(debug=True)
# This is the end of the block for the login and password security content


# == Your Routes Here ==

@app.route('/spaces', methods=['GET'])
def get_spaces():
    connection = get_flask_database_connection(app) 
    repository = SpaceRepository(connection)        
    repository.get_all_spaces()
    spaces = repository.get_all_spaces()
    return render_template('spaces.html', spaces=spaces)

@app.route('/listspace', methods=['GET', 'POST'])
def list_space():
    form = ListSpacesForm()
    if form.validate_on_submit():
        connection = get_flask_database_connection(app)
        repository = SpaceRepository(connection)
        space = Space(
            id=3, #this ID is not used, autogenerated by DB, but needed for the constructor, dont delete
            name=form.space_name.data,
            description=form.space_description.data,
            price_per_night=form.space_price_per_night.data,
            user_id=1,  # Assuming user_id is 1 for this example
        )
        repository.create_space(space)
        return redirect('/spaces')
    return render_template('listspace.html', form=form)

@app.route('/users/<int:current_user_id>/spaces/<int:space_id>', methods=['GET'])
def show_listing(current_user_id, space_id):
    connection = get_flask_database_connection(app)
    space_repository = SpaceRepository(connection)
    space = space_repository.get_space(space_id)
    space.dates_booked = [i.isoformat() for i in space.dates_booked]
    return render_template('booking.html', space=space, current_user_id=current_user_id)

@app.route('/users/<int:current_user_id>/spaces/<int:space_id>', methods=['POST'])
def request_booking(current_user_id, space_id):
    connection = get_flask_database_connection(app)
    space_repository = SpaceRepository(connection)
    request_repository = RequestRepository(connection)
    space = space_repository.get_space(space_id)
    request_sender = current_user_id
    space_owner = space.user_id
    space_requested = space.id
    message_content = request.form.get("request-message")
    dates_requested = request.form.get("daterange", "").strip()
    if not message_content or not dates_requested:
        return render_template('booking.html', space=space, errors=["All fields are required."]), 400        
    dates_requested = [datetime.datetime.strptime(date.strip(), "%Y-%m-%d").date() for date in dates_requested.split(' - ')]
    new_request = Request(None, request_sender, space_owner, message_content, space_requested, dates_requested)
    if new_request.is_valid():
        new_request = request_repository.create_request(new_request)
        return redirect(f"/users/{current_user_id}/requests")
    else:
        return render_template('booking.html', new_request=new_request, errors=new_request.generate_errors(), space=space, current_user_id=current_user_id), 400
    

@app.route('/users/<int:id>/requests', methods=['GET'])
def view_requests(id):
    connection = get_flask_database_connection(app)
    requests_repository = RequestRepository(connection)
    user_repository = UserRepository(connection)
    spaces_repository = SpaceRepository(connection)
    user = user_repository.get_user(id)
    # sent_requests = requests_repository.get_all_sent_requests(user.id)
    # recieved_requests = requests_repository.get_all_recieved_requests(user.id)
    user_requests = reversed([request for request in requests_repository.get_all_requests_for_user(id)])
    return render_template('requests.html', user_requests=user_requests, user=user, user_repository=user_repository, spaces_repository=spaces_repository)

@app.route('/users/<int:user_id>/requests/<int:request_id>', methods=['GET'])
def view_request(user_id, request_id):
    connection = get_flask_database_connection(app)
    requests_repository = RequestRepository(connection)
    user_repository = UserRepository(connection)
    spaces_repository = SpaceRepository(connection)
    user = user_repository.get_user(user_id)
    request = requests_repository.get_request(request_id)
    return render_template('request.html', user=user, user_repository=user_repository, spaces_repository=spaces_repository, request=request)

# GET /index
# Returns the homepage
# Try it:
#   ; open http://localhost:5001/index
@app.route('/index', methods=['GET'])
def get_index():
    return render_template('index.html')

# These lines start the server if you run this file directly
# They also start the server configured to use the test database
# if started in test mode.
if __name__ == '__main__':
    app.run(debug=True, port=int(os.environ.get('PORT', 5001)))

