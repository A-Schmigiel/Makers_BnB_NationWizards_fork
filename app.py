import os
from flask import Flask, request, render_template, redirect
from lib.database_connection import get_flask_database_connection
import datetime
import calendar
# helps manage secret key
from flask_bcrypt import Bcrypt
from forms import LogInForm, ListSpacesForm, CreateUserForm
# repositories
from lib.spaces_repository import SpaceRepository
from lib.requests_repository import RequestRepository
from lib.users_repository import UserRepository
# classes
from lib.space import Space
from lib.request import Request
from lib.user import User
#login stuff
from flask_login import LoginManager, login_user, login_required, current_user, logout_user



# == INITIALIZATIONS ==
app = Flask(__name__)
app.config['SECRET_KEY'] = '072bb84cfdff08af0c1d8cd67f3be65bba12485bf0e9ea4dae5a49dc83260663'
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
@login_manager.user_loader
def load_user(user_id):
    connection = get_flask_database_connection(app)
    repository = UserRepository(connection)
    return repository.get_user(user_id)

# == SIGN UP / HOMEPAGE ROUTE ==

@app.route('/', methods=['GET', 'POST'])
def index():
    form = CreateUserForm()
    if form.validate_on_submit():
        email = form.email.data
        username = form.username.data
        password = form.password.data
        confirm_password = form.confirm_password.data

        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        if bcrypt.check_password_hash(hashed_password, password):
            match_message = "Password hash matches input password."
        else:
            match_message = "Password hash did not match input."
        return (
            f'Hello, {username}!<br>'
            # f'Email: {email}<br>'
            f'{match_message}'
        )
    
    return render_template('spaces.html', form=form)


# == LOGIN / LOGOUT ROUTES ==:

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LogInForm()
    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data

        connection = get_flask_database_connection(app)
        repository = UserRepository(connection)
        user = repository.get_user_by_username(username)
        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            return redirect('/spaces')
        else:
            return render_template('login.html', form=form, error="Invalid credentials")
    return render_template('login.html', form=form)

@app.route('/logout')
@login_required
def logout():
    connection = get_flask_database_connection(app)
    repository = UserRepository(connection)
    logout_user()
    return redirect('/index')


# == SPACES/LISTSPACES/REQUESTS ROUTES ==

@app.route('/spaces', methods=['GET'])
@login_required
def get_spaces():
    connection = get_flask_database_connection(app) 
    repository = SpaceRepository(connection)        
    repository.get_all_spaces()
    spaces = repository.get_all_spaces()
    return render_template('spaces.html', spaces=spaces)

@app.route('/listspace', methods=['GET', 'POST'])
@login_required
def list_space():
    form = ListSpacesForm()
    if form.validate_on_submit():
        connection = get_flask_database_connection(app)
        repository = SpaceRepository(connection)
        space = Space(
            id=3, #this ID is not used, autogenerated by DB, but needed for the constructor, dont delete
            name=form.space_name.data,
            description=form.space_description.data,
            price_per_night=form.space_price_per_night.data,
            user_id=current_user.id,
            upload_image="placeholder" # change this when doing HTML input
        )
        repository.create_space(space)
        return redirect('/spaces')
    return render_template('listspace.html', form=form)

@app.route('/users/<int:current_user_id>/spaces/<int:space_id>', methods=['GET'])
@login_required
def show_listing(current_user_id, space_id):
    connection = get_flask_database_connection(app)
    space_repository = SpaceRepository(connection)
    space = space_repository.get_space(space_id)
    space.dates_booked = [i.isoformat() for i in space.dates_booked]
    return render_template('booking.html', space=space, current_user_id=current_user_id)


@app.route('/users/<int:current_user_id>/spaces/<int:space_id>', methods=['POST'])
@login_required
def request_booking(current_user_id, space_id):
    connection = get_flask_database_connection(app)
    space_repository = SpaceRepository(connection)
    request_repository = RequestRepository(connection)
    space = space_repository.get_space(space_id)
    request_sender = current_user_id
    space_owner = space.user_id
    space_requested = space.id
    message_content = request.form.get("request-message")
    dates_requested = request.form.get("daterange", "").strip()
    if not message_content or not dates_requested:
        return render_template('booking.html', space=space, errors=["All fields are required."]), 400        
    dates_requested = [datetime.datetime.strptime(date.strip(), "%Y-%m-%d").date() for date in dates_requested.split(' - ')]
    new_request = Request(None, request_sender, space_owner, message_content, space_requested, dates_requested)
    if new_request.is_valid():
        new_request = request_repository.create_request(new_request)
        return redirect(f"/users/{current_user_id}/requests")
    else:
        return render_template('booking.html', new_request=new_request, errors=new_request.generate_errors(), space=space, current_user_id=current_user_id), 400
    
    
@app.route('/users/<int:id>/requests', methods=['GET'])
@login_required
def view_requests(id):
    connection = get_flask_database_connection(app)
    requests_repository = RequestRepository(connection)
    user_repository = UserRepository(connection)
    spaces_repository = SpaceRepository(connection)
    user = user_repository.get_user(id)
    user_requests = reversed([request for request in requests_repository.get_all_requests_for_user(id)])
    return render_template('requests.html', user_requests=user_requests, user=user, user_repository=user_repository, spaces_repository=spaces_repository)

@app.route('/users/<int:user_id>/requests/<int:request_id>', methods=['GET'])
@login_required
def view_request(user_id, request_id):
    connection = get_flask_database_connection(app)
    requests_repository = RequestRepository(connection)
    user_repository = UserRepository(connection)
    spaces_repository = SpaceRepository(connection)
    user = user_repository.get_user(user_id)
    show_request = requests_repository.get_request(request_id)
    dates_requested = request.form.get("daterange", "").strip()
    return render_template('request.html', user=user, user_repository=user_repository, spaces_repository=spaces_repository, request=show_request)

@app.route('/users/<int:user_id>/requests/<int:request_id>', methods=['POST'])
@login_required
def approve_or_deny_request(user_id, request_id):
    connection = get_flask_database_connection(app)
    requests_repository = RequestRepository(connection)
    user_repository = UserRepository(connection)
    spaces_repository = SpaceRepository(connection)
    user = user_repository.get_user(user_id)
    show_request = requests_repository.get_request(request_id)
    if 'approve_button' in request.form:
        requests_repository.approve_request(show_request)
    elif 'deny_button' in request.form:
        requests_repository.deny_request(show_request)
    return redirect(f"/users/{user.id}/requests")


    # return render_template('request.html', user=user, user_repository=user_repository, spaces_repository=spaces_repository, request=request)


# GET /index
# Returns the homepage
# Try it:
#   ; open http://localhost:5001/index
@app.route('/index', methods=['GET'])
def get_index():
    return render_template('index.html')


# POST /user
# Want to create a new user and add them to the user table
#   ; open http://localhost:5001/
@app.route('/index', methods=['POST'])
def create_user():
    connection = get_flask_database_connection(app)
    repository = SpaceRepository(connection)
    data = request.get_json()  # Use request.form if you're submitting from a form
    user = User(
        username=data['username'],
        email=data['email'],
        password=data['password'],
        confirm_password=data['confirm_password']
    )
    repository.create_user(user)
    return '', 200  


# These lines start the server if you run this file directly
# They also start the server configured to use the test database
# if started in test mode.
if __name__ == '__main__':
    app.run(debug=True, port=int(os.environ.get('PORT', 5001)))
